generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exam_scores {
  id                    Int       @id @default(autoincrement())
  exam_id               Int
  note_id               BigInt // Changed from Int to BigInt
  descriptive_score     Float?    @db.Real
  multiple_choice_score Float?    @db.Real
  total_score           Float?    @db.Real
  max_score             Float?    @db.Real
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  exams                 exams     @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model exams {
  id             Int              @id @default(autoincrement())
  name           String
  date           DateTime         @db.Date // Changed from String
  is_mock        Boolean          @default(false)
  exam_type      String           @default("descriptive")
  university_id  Int?
  notes          String?
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  exam_scores    exam_scores[]
  universities   universities?    @relation(fields: [university_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subject_scores subject_scores[]
}

model study_logs {
  id             Int       @id @default(autoincrement())
  date           DateTime  @db.Date // Changed from String
  textbook_id    Int
  planned_amount Int?      @default(0)
  actual_amount  Int?      @default(0)
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  textbooks      textbooks @relation(fields: [textbook_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model study_schedules {
  id             Int       @id @default(autoincrement())
  textbook_id    Int
  start_date     DateTime  @db.Date // Changed from String
  end_date       DateTime  @db.Date // Changed from String
  daily_goal     Int?
  buffer_days    Int?      @default(0)
  weekday_goals  String?
  total_problems Int?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  textbooks      textbooks @relation(fields: [textbook_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model subject_scores {
  id         Int       @id @default(autoincrement())
  exam_id    Int
  exam_type  String
  subject    String
  score      Float?    @db.Real
  max_score  Float?    @db.Real
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  exams      exams     @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([exam_id, exam_type, subject])
}

model textbooks {
  id              Int               @id @default(autoincrement())
  title           String
  subject         String
  total_problems  Int               @default(0)
  anki_deck_name  String?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  study_logs      study_logs[]
  study_schedules study_schedules[]
}

model universities {
  id         Int       @id @default(autoincrement())
  name       String
  rank       Int?
  notes      String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  exams      exams[]
}
